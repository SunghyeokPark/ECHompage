<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/WEB-INF/views/css/"/>
    <resources mapping="/fonts/**" location="/WEB-INF/views/fonts/"/>
    <resources mapping="/js/**" location="/WEB-INF/views/js/"/>
    <resources mapping="/img/**" location="/WEB-INF/views/img/"/>
    <resources mapping="/addon/**" location="/WEB-INF/views/addon/"/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="kr.endlesscreation.*" />
	
	
	<!-- JNDI기반의 설정 설정 예시 -->			<!-- server 의 context.xml 에 등록된 이름 -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/myabeeksurvey"
		resource-ref="true" /> -->

	<!-- data source 정보를 입력~ -->
	<!-- <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations" value="classpath:mappers/*Mapper.xml" />
		<beans:property name="configLocation" value = "classpath:sqlMapConfigure.xml"></beans:property>
	</beans:bean> -->
	 

	<!--공유되지 않고 thread에 안전, requestScope, method scope -->
	<!-- <beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory" />
	</beans:bean> -->
	
	
	<!-- 여기서 부턴 트랜잭션 처리 부분~ -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" />
	
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" /> -->
		
	<!-- advice 설정~~ aspect 이다! 공통으로 들어갈 코드 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice> -->
	
	<!-- AOP 를 사용한다 -->
	<!-- <aop:config>
		<aop:pointcut expression="within(kr.endlesscreation.*)" id="serviceInsertMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceInsertMethod" />
	</aop:config>   -->
	
</beans:beans>
